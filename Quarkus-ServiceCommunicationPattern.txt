               MicroService Service Communications


Services are represented by Apis

Apis are modeled in many ways

1.RPI
    -REST API
    -RPC - Grpc
    -GraphQl api
2.Message based
    -MOM
       -redis,RabbitMQ
    -Event driven Arch
       Vertx-Event Bus
       Kafka 

Service Communications:

REST: Rest to Rest - http

Quarkus Implmementations
  1.MicroProfile Rest Client -  both reactive and non reactive
  2.Vertx WebClient - By Default Reactive.
  3.Java 11 HttpClient - Sync and Async


Rest Client Implementation:

Dependency:
quarkus ext add resteasy-reactive-jackson
quarkus ext add rest-client-reactive-jackson
quarkus ext add rest-client-reactive

Communications between services are orachastrated by "RestClient"

Step 1:
Caller Service:
package org.acme.rest.client;

import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/greet")
public class GreetingService {
    
    @GET
    public String greet() {
        return "";
    }
}

User -----Gives Request to the caller -- GET /greet



Step 2:

Callee Service:
package org.acme.rest.client;

package org.acme;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public String hello(){
        return helloService.sayHello();
    }
}
package org.acme.rest.client;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public String sayHello(){
        return "Hello Rest Client!!!!";
    }
}
..................................................................................


Step 3:

RestClient Interface - to facilitate Rest Service Communications.

package org.acme.restcommunicator;


import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

@RegisterRestClient
@Path("/hello")
public interface HelloRestClientService {
    //methods
    @GET
    String sayHello();
}


1.Here we need to declare interface
2.Annotate interface with @RegisterRestClient
3.@Path("/hello") indicates the callee route url
4.HTTP method and apis mapping inside interface


Step 5:Configuring application.properties

#mapping the rest client
org.acme.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
org.acme.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.SingleTon


Step 6: Inject RestClient Interface into where ever you want to call.
package org.acme.rest.client;

package org.acme;

import org.acme.restcommunicator.HelloRestClientService;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return helloRestClientService.sayHello();
    }
}

Step 7: Testing
http://localhost:8080/greet
    It will delegate the request to another http service.
.....................................................................................
				Refactored Configuration

package org.acme.restcommunicator;


import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

//@RegisterRestClient

@RegisterRestClient(configKey = "hello-api")
@Path("/hello")
public interface HelloRestClientService {
    //methods
    @GET
    String sayHello();
}


#Rest Client configuration
#org.acme.restcommunicator.HelloRestClientService/mp-rest/url=http://localhost:8080
#org.acme.restcommunicator.HelloRestClientService/mp-rest/scope=javax.inject.SingleTon

#Refactored configuration
hello-api/mp-rest/url=http://localhost:8080
hello-api/mp-rest/scope=javax.inject.Singleton
..........................................................................
				Non Blocking(Reactive)


Callee:
package org.acme;

import io.smallrye.mutiny.Uni;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public Uni<String> sayHello(){
        return Uni.createFrom().item("Hello Uni");
    }
}
Hello Resource:
package org.acme;

import io.smallrye.mutiny.Uni;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello(){
        return helloService.sayHello();
    }
}

Rest Client:
package org.acme.restcommunicator;


import io.smallrye.mutiny.Uni;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

//@RegisterRestClient

@RegisterRestClient(configKey = "hello-api")
@Path("/hello")
public interface HelloRestClientService {
    //methods
    @GET
    Uni<String> sayHello();
}

Caller :
package org.acme;

import io.smallrye.mutiny.Uni;
import org.acme.restcommunicator.HelloRestClientService;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return helloRestClientService.sayHello();
    }
}
....................................................................................
			Service communication via Vertx-WebClient
....................................................................................

 <dependency>
            <groupId>io.smallrye.reactive</groupId>
            <artifactId>smallrye-mutiny-vertx-web-client</artifactId>
 </dependency>
 <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-vertx</artifactId>
 </dependency>


Callee:
package org.acme;

import io.smallrye.mutiny.Uni;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public Uni<String> sayHello(){
        return Uni.createFrom().item("Hello Uni");
    }

}

package org.acme;


import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hai")
public class HaiResource {

    @Inject
    HaiService haiService;

    @GET
    public String sayHai() {
        return haiService.sayHai();
    }
}

Caller:
package org.acme;

import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.ext.web.client.HttpResponse;
import io.vertx.mutiny.ext.web.client.WebClient;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.mutiny.core.Vertx;
import org.acme.restcommunicator.HelloRestClientService;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    //Grab Vertx Runtime instance
    @Inject
    Vertx vertx;

    WebClient webClient;

    //init
    @PostConstruct
    public void init() {
        //create webclient instance through which you can communicate
        webClient = WebClient.create(vertx, new WebClientOptions()
                .setDefaultHost("localhost")
                .setDefaultPort(8080));
    }

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return helloRestClientService.sayHello();
    }

    //Access the HaiResource via Vertx Client.
    @GET
    @Path("/vertx")
    public Uni<String> sayHai() {
        return webClient.get("/hai").send().onItem().transform(HttpResponse::bodyAsString);
    }


}
.....................................................................................
			  Message Oriented Communication
.....................................................................................
			Service Communications via Messages
			   (Event Driven Microservices)
				Using vertx Event Bus
....................................................................................
how to build loosly coupled microservices?


AKKA - Actor Model Based.

Actor model is architure model which describes how data can be exchanged among programs we call services using "message oriented and event driven".

Vertx inspired akka with respect to message passing techniques, now we can pass messages using vertx  "Event Bus".

Event Bus:
 -Event bus is object through which we can exchange messages async.
 -Event bus is just like message broker which in memory message broker
 -Event bus uses queue to store messages
 -Event bus communicates via tcp protocal
 -Event bus can exchange any type of data- including json.
 -Event can be used to send and receive messages across the system.

Quarkus can Use EventBus for message oriented communication.


Event Bus has its own in memory Event queue where all message published.

How consumer and publisher are connectected?

 Via address :Messages are sent on the event bus to an address.
address should be unique, can follow dns naming model

 ibm.order
 ibm.order.inventory


Types of message Delivery:

1.point to point -  
  send messages to only one consumer.
 eventbus.send
2.Publisher/Subscriber  - pub sub model
  One publisher many subscribers
  eventbus.publish
3.request/reply
    send messages to only one consumer with ack.


Dependency:
 vertx
 
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>


Steps:

1.Listeners : Service Bean which listens for events


package org.acme;


import io.quarkus.vertx.ConsumeEvent;

import javax.enterprise.context.ApplicationScoped;

//Listener

//Every service is identified by address,
//Every service has unique address, if you dont provide explicit address,  quarkus takes fully
//qualified name of the bean like. eg org.acme.GreetingService


package org.acme;


import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;

import javax.enterprise.context.ApplicationScoped;

//Listener

//Every service is identified by address,
//Every service has unique address, if you dont provide explicit address,  quarkus takes fully
//qualified name of the bean like. eg org.acme.GreetingService


@ApplicationScoped
public class GreetingService {

    //biz logic
    //@ConsumeEvent("org.acme.GreetingService")
    @ConsumeEvent // default address  is name of the bean with package name
    public String sayHello(String name) {
        return "Hello Event Bus";
    }

    @ConsumeEvent("greeting")
    public void sayGreet(Message<String> msg) {
        //get the Message and process
        System.out.println(msg.body());
        System.out.println(msg.address());
        msg.reply("done");
    }

    @ConsumeEvent("greetingv1")
    public String sayGreet_v1(Message<String> msg) {
       return msg.body().toUpperCase();
    }

    //pub sub - many subscribers /consumers
    @ConsumeEvent("notification")
    public void notifyOne(Message<String> msg) {
        //get the Message and process
        System.out.println(msg.body());
        System.out.println(msg.address());
    }

    @ConsumeEvent("notification")
    public void notifyTwo(Message<String> msg) {
        //get the Message and process
        System.out.println(msg.body());
        System.out.println(msg.address());
    }
}

..........

How to publish/send Messages?

package org.acme;


import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {


    @Inject
    EventBus eventBus;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        //Request-Reply pattern - with ack
        return eventBus.<String>request(GreetingService.class.getName().toString(), "")
                .onItem().transform(Message::body);
    }

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    @Path("{name}")
    public String greet(@PathParam("name") String name) {
        //Request-Reply (request and forget) pattern : point to point
        EventBus bus = eventBus.requestAndForget("greeting", name);
        return "Processed";
    }

    //pubsub pattern publishes messages to many subscribers

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    @Path("/push/{msg}")
    public String notifyPush(@PathParam("msg") String msg) {
        //pub - sub pattern
        eventBus.publish("notification", msg).toString();
        return "Published";
    }


}

.....................................................................................
		  Event Sourcing -Microservice Design Pattern
.....................................................................................
A service need to send messages to another service.
   Message oriented Communication

Highly loosly coupled communications,This pattern already there in the monolithic applications for integrating with third party system or inter system communication or 
long running process.

Implmenetations in Quarkus:

1.SmallRye Reactive Messaging
  SmallRye Reactive Messaging is a framework for building event-driven, data streaming, and event-sourcing applications using CDI.
 It lets your application interaction using various messaging technologies such as Apache Kafka, AMQP or MQTT. 
The framework provides a flexible programming model bridging CDI and event-driven.

Core Concepts of Reactive Messaging:
....................................

1.Message
   It is wrapper which contains "payload(data) + meta data"
   The App can pusblish message(publisher) and can process message(consumer)

2.Channel
   It is logical pipeline through which Messages are transmitted.

3.Connector
   It is a code which connects brokers which is software which has Messages.

Programming Model:
 Reactive Messaging uses CDI annotations to abstract underlying message brokers


Annotations:

org.eclipse.microprofile.reactive.messaging.Incoming - indicates the consumed channel

org.eclipse.microprofile.reactive.messaging.Outgoing - indicates the populated channel

import org.eclipse.microprofile.reactive.messaging.Message;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class MessageProcessingBean {

    @Incoming("consumed-channel")
    @Outgoing("populated-channel")
    public Message<String> process(Message<String> in) {
        // Process the payload
        String payload = in.getPayload().toUpperCase();
        // Create a new message from `in` and just update the payload
        return in.withPayload(payload);
    }
}
..................................................................................

Sample Code Work Flow:
......................

@Outgoing("source")
public Multi<String> generate() {
    return Multi.createFrom().items("Hello", "from", "reactive", "messaging");
}

@Incoming("source")
@Outgoing("sink")
public String process(String in) {
    return in.toUpperCase();
}

@Incoming("sink")
public void consume(String processed) {
    System.out.println(processed);
}
generate --> [ source ] --> process --> [ sink ] --> consume

only @Outgoing are used to generate messages or payloads

only @Incoming are used to consume messages or payloads

both @Incoming and @Outgoing are used to process messages or payloads; or transform the stream == Creating Messages
....................................................................................
		SmallRye Reactive Messaging With Apache Kafka
...................................................................................			
Req:
 1.Quarkus App with necessary dependency
 2.Kafka 
    -Dev 
	Quarkus offers Kafka as dev service
      quarkus-smallrye-reactive-messaging-kafka
    -Production

Application Arch:

 There will be two application

 1.Producer App which produces messages and stores into Kafka
 2.Consumer App which receives messages from the Kafka and process them, transfers to    again producer applications.

pom.xml:
 <dependency>
         <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
        </dependency>
       
Steps:
1.Producer :

 POST /quotes/request
    -publish data into Kafka cluster
 GET /quotes
    -Consumes From the Kafka cluster after processing.


Models:
package org.acme.kafka.model;

public class Quote {

    public String id;
    public int price;

    /**
     * Default constructor required for Jackson serializer
     */
    public Quote() { }

    public Quote(String id, int price) {
        this.id = id;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "id='" + id + '\'' +
                ", price=" + price +
                '}';
    }
}

Serialzer: 
package org.acme.kafka.model;

import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;

public class QuoteDeserializer extends ObjectMapperDeserializer<Quote> {
    public QuoteDeserializer() {
        super(Quote.class);
    }
}

QuoteResource:
package org.acme.kafka.producer;

import java.util.UUID;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.acme.kafka.model.Quote;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;

import io.smallrye.mutiny.Multi;

// POST /quotes/request -  send data to the Channel
// GET  /quotes   -  Consume data from the channel
@Path("/quotes")
public class QuotesResource {

    @Channel("quote-requests")
    Emitter<String> quoteRequestEmitter;

    /**
     * Endpoint to generate a new quote request id and send it to "quote-requests" Kafka topic using the emitter.
     */
    @POST
    @Path("/request")
    @Produces(MediaType.TEXT_PLAIN)
    public String createRequest() {
        UUID uuid = UUID.randomUUID();
        quoteRequestEmitter.send(uuid.toString());
        return uuid.toString();
    }

    @Channel("quotes")
    Multi<Quote> quotes;

    /**
     * Endpoint retrieving the "quotes" Kafka topic and sending the items to a server sent event.
     */
    @GET
    @Produces(MediaType.SERVER_SENT_EVENTS) // denotes that server side events (SSE) will be produced
    public Multi<Quote> stream() {
        return quotes.log();
    }
}
................................
PS E:\session\IBM\2022\oct\quarkus-session\kafka-quickstart> mvn -f producer quarkus:dev
PS E:\session\IBM\2022\oct\quarkus-session\kafka-quickstart> mvn -f processor quarkus:dev

http://localhost:8080/quotes.html
.....................................................................................
			 Service Registry and Discovery
....................................................................................
...................................................................................
         Quarkus and Service Registry and Discovery implmentation	
..................................................................................

SmallRye Strok
  SmallRye Stork 1.3.2 is a service discovery and client-side load-balancing framework.

The essence of distributed systems resides in the interaction between services. In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy. But, how do you select the best instance of your service? That’s where Stork helps. Stork is going to select the most appropriate instance. It offers:

Extensible service discovery mechanisms
Built-in support for Consul and Kubernetes
Customizable client load-balancing strategies
A programmatic API and a managed approach
A Quarkus integration, but Stork can be used in any environment 


Service Registry:
  It is a database which can store all services with serviceName and its location

Service Registry Implmenetations are Apache zookeer,Consul,DNS,Kubernets,Eureka..

Strok is just abstraction(apis) which binds registrys for registration,discovery,load balancing

 Client [Strok][loadBalancer]-----|Consul--
			

Strok offers lot of Load balancer Algorithim

1.Round Robin
2.Random
3.Least Requests
4.Response Time
5.Power Of Two Choices
6.Sticky
7.Custom Load Balancer

Implementations in Quarkus:

Req:
 1.Quarkus App need same RestClient dependency but it should be Reactive
   quarkus-rest-client-reactive
  
 2.Registry Server - Consul
   <dependency>
    <groupId>io.smallrye.stork</groupId>
    <artifactId>stork-service-discovery-consul</artifactId>
    <version>1.3.2</version>
  </dependency>

  <dependency>
    <groupId>io.smallrye.reactive</groupId>
    <artifactId>smallrye-muntiny-vertx-consul-client</artifactId>
    <version>1.3.2</version>
  </dependency>

3.Start Registry Server.


...............

pom.xml
All dependency must be reactive:
 <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-stork</artifactId>
        </dependency>
        <dependency>
            <groupId>io.smallrye.stork</groupId>
            <artifactId>stork-service-discovery-consul</artifactId>
        </dependency>
        <dependency>
            <groupId>io.smallrye.reactive</groupId>
            <artifactId>smallrye-mutiny-vertx-consul-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>


steps:

Start consul server

docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501

application.properties

#Consul Server configuration: Consul is stand up as Registry Server
consul.host=localhost
consul.port=8500


#Service Configuration
hello-api/mp-rest/url=stork://hello-service
hello-api/mp-rest/scope=javax.inject.Singleton

quarkus.stork.hello-service.service-discovery.type=consul
quarkus.stork.hello-service.service-discovery.consul-host=localhost
quarkus.stork.hello-service.service-discovery.consul-port=8500


Strok Registration Bean:

package org.acme.service.registry.beans;


import io.quarkus.runtime.StartupEvent;
import io.vertx.ext.consul.ConsulClientOptions;
import io.vertx.ext.consul.ServiceOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.consul.ConsulClient;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;

@ApplicationScoped
public class Registration {

    @ConfigProperty(name = "consul.host")
    String host;
    @ConfigProperty(name = "consul.port")
    int port;

    @ConfigProperty(name = "hello-service-port", defaultValue = "8080")
    int hello;

    public void init(@Observes StartupEvent ev, Vertx vertx) {

        ConsulClient client = ConsulClient.create(vertx, new ConsulClientOptions()
                .setHost(host).setPort(port));

        client.registerServiceAndAwait(
                new ServiceOptions().setPort(hello).setAddress("localhost")
                        .setName("hello-service").setId("hello"));

    }
}

Service Interface:
package org.acme.restcommunicator;


import io.smallrye.mutiny.Uni;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

//@RegisterRestClient

@RegisterRestClient(configKey = "hello-api")
@Path("/hello")
public interface HelloRestClientService {
    //methods
    @GET
    Uni<String> sayHello();
}
....................

Service  Callee:
package org.acme;

import io.smallrye.mutiny.Uni;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public Uni<String> sayHello(){
        return Uni.createFrom().item("Hello Strok");
    }

}
package org.acme;

import io.smallrye.mutiny.Uni;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello(){
        return helloService.sayHello();
    }

}
...

Caller:
package org.acme;

import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.ext.web.client.HttpResponse;
import io.vertx.mutiny.ext.web.client.WebClient;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.mutiny.core.Vertx;
import org.acme.restcommunicator.HelloRestClientService;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    //Grab Vertx Runtime instance
    @Inject
    Vertx vertx;
    WebClient webClient;

    //init
    @PostConstruct
    public void init() {
        //create webclient instance through which you can communicate
        webClient = WebClient.create(vertx, new WebClientOptions()
                .setDefaultHost("localhost")
                .setDefaultPort(8080));
    }

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return helloRestClientService.sayHello();
    }

    //Access the HaiResource via Vertx Client.
    @GET
    @Path("/vertx")
    public Uni<String> sayHai() {
        return webClient.get("/hai").send().onItem().transform(HttpResponse::bodyAsString);
    }


}

Testing :
Steps:
docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501

mvn compile quarkus:dev

Testing:
http://localhost:8500/ui/dc1/services 
http://localhost:8080/hello

....................................................................................












