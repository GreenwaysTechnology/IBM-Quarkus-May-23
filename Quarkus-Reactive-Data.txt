				Database Integration
...............................................................			    Quarkus Data
.....................................................................................
			     Quarkus- ORM
                         JPA,Hibernate,Panache			
.....................................................................................

Microservice design pattern called "Database Per Service Pattern" ,According to this Pattern Quarkus implements datasources.

Database Per Service Configuration:

quarkus.datasource."ServiceName".dbProperties=value


eg:
quarkus.datasource.db-kind=h2
quarkus.datasource.username=username-default
quarkus.datasource.jdbc.url=jdbc:h2:mem:default
quarkus.datasource.jdbc.max-size=13

quarkus.datasource.users.db-kind=h2
quarkus.datasource.users.username=username1
quarkus.datasource.users.jdbc.url=jdbc:h2:mem:users
quarkus.datasource.users.jdbc.max-size=11

quarkus.datasource.inventory.db-kind=h2
quarkus.datasource.inventory.username=username2
quarkus.datasource.inventory.jdbc.url=jdbc:h2:mem:inventory
quarkus.datasource.inventory.jdbc.max-size=12

quarkus.datasource.customers.db-kind=postgresql 
quarkus.datasource.customers.username=<your username>
quarkus.datasource.customers.password=<your password>
quarkus.datasource.customers.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test
quarkus.datasource.customers.jdbc.max-size=16


DbKind: Type of database
common db-kind value conventions

DB2: db2

Derby: derby

H2: h2

MariaDB: mariadb

Microsoft SQL Server: mssql

MySQL: mysql

Oracle: oracle

PostgreSQL: postgresql, pgsql or pg

Data Source:
...........
Agroal data source is default datasource...
  It is modern,lightweight connection pool implementation designed for high performance.
  It is similar to Apache DBCP libs.

Data sources are powered with reactive programming
   Datasoruces are powered with non blocking arch....

Transactions:
   Quarkus data module offeres transaction implementations.
   Quarkus implments Narayana as transaction manager

What is Narayana?
Narayana is a transactions toolkit which provides support for applications developed using a broad range of standards-based transaction protocols:

JTA
JTS
Web-Service Transactions
REST Transactions
STM

Reactive Data sources:
  quarkus-reactive-db2-client
  quarkus-reactive-pg-client
 etc...

Coding Pattern:
   Quarkus uses hibernate as low level engine for persistence and built upon JPA   Standards
   Quarkus uses Panache framework built on top of Hibernate.

			Panache
			  |
			 JPA
			  |
			Hibernate
			   
....................................................................................
			    JPA With Hibernate
...................................................................................

Steps:

1.You need database 
   db2
   Derby(in-process)
   H2(in-process)
   Mariadb
   mysql
   postgresql

How to install database for dev?

Two ways
1.install db server
2.install via containers -dockers

Quarkus apps  has mode

1.dev mode
  start db server  
     standalone
     via docker
2.prod mode
   via containers
   via vms


Quarkus offers features dev services for databases
...................................................
If your quaurkus apps runs in dev/test mode, quarkus provides you with a zero config database outof the box,
 a feature we refer to as "Dev Services"

If you enable dev service for any database, quarkus runs database as part of app within embeded docker container.
 db2,mariadb,mssql,mysql,oracle,postgresql-dev services enabled database

application.properties
quarkus.devservices.enabled=true/false
quarkus.datasource.devservices.enabled=true/false

username and password for dev services:
.......................................
postgre,mariadb,mysql,db2,h2 - quarkus,quarkus


2.Quarkus orm dependency
 quarkus-hibernate-orm
 quarkus-agroal
 quarkus-jdbc-postgresql

3.JPA Annotations
  @Entity

4.EntityManager
.....................................................................................

		NonBlocking REST API,Hibernate API,Database access
....................................................................................

Steps:
POM.XML
   <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-reactive-pg-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-reactive-panache</artifactId>
    </dependency>

application.properties:
quarkus.devservices.enabled=true
quarkus.datasource.devservices.enabled=true

#Datasource configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus

#Hibernate configuration
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

resources/import.sql
INSERT INTO customer(id,name,city) VALUES(nextval('hibernate_sequence'),'Subramanian','Coimbatore');
INSERT INTO customer(id,name,city) VALUES(nextval('hibernate_sequence'),'Murugan','Coimbatore');
INSERT INTO customer(id,name,city) VALUES(nextval('hibernate_sequence'),'Karthik','Chennai');


Entity with Panache Framwork:


package org.ibm.quarkus.data.entity;

import io.quarkus.hibernate.reactive.panache.PanacheEntity;

import javax.persistence.Column;
import javax.persistence.Entity;

@Entity
public class Customer extends PanacheEntity {
    @Column
    public String name;
    @Column
    public String city;

    public Customer() {
    }

    public Customer(String name, String city) {
        this.name = name;
        this.city = city;
    }
}

Resource :

package org.ibm.quarkus.data.resource;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.quarkus.hibernate.reactive.panache.Panache;
import io.smallrye.mutiny.CompositeException;
import io.smallrye.mutiny.Uni;
import org.ibm.quarkus.data.entity.Customer;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import java.util.List;

@Path("/api/customers")
public class CustomerResource {

    @GET
    public Uni<List<Customer>> get() {
        return Customer.listAll();
    }

    @GET
    @Path("{name}")
    public Uni<Customer> findByName(@PathParam("name") String name) {
        return Customer.findByName(name);
    }

    //Get Customer byId
    @GET
    @Path("/byid/{id}")
    public Uni<Customer> findById(Long id) {
        return Customer.findById(id);
    }

    //create /save : Transaction must be enabled when we do add or delete,update
    //Incase of reactive transaction is enabled via code, in non reactive env
    //we use @Transactional annoation
    @POST
    public Uni<Response> create(Customer customer) {
        //handle error
        if (customer == null || customer.name == null) {
            //throw exception
            throw new WebApplicationException("Customer Not found", 422);
        }
        return Panache
                .withTransaction(customer::persist)
                .replaceWith(Response.ok(customer)
                        .status(Response.Status.CREATED)
                        .build());
    }
    //delete a row

    @DELETE
    @Path("/byid/{id}")
    public Uni<Response> delete(Long id) {
        return Panache
                .withTransaction(() -> Customer.deleteById(id))
                .map(deleted -> deleted
                        ? Response.ok().status(Response.Status.NO_CONTENT).build()
                        : Response.ok().status(Response.Status.NOT_FOUND).build());
    }

    //Update

    @PUT
    @Path("/byid/{id}")
    public Uni<Response> update(Long id, Customer customer) {
        if (customer == null || customer.name == null) {
            throw new WebApplicationException("Customer Not Found", 422);
        }
        //Update
        return Panache.withTransaction(() -> Customer.<Customer>findById(id)
                .onItem()
                .ifNotNull()
                .invoke(entity -> entity.city = customer.city) //update logic
                .onItem().ifNotNull().transform(entity -> Response.ok(entity).build())
                .onItem().ifNull().continueWith(Response.ok().status(Response.Status.NOT_FOUND)::build));

    }
...................................................................................
		DAO Pattern/Repository Pattern


1.Non Reactive Dependency:
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-orm-panache</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-postgresql</artifactId>
    </dependency>



Steps:
1.Entity
package org.acme.hibernate.orm.panache.repository;

import jakarta.persistence.Cacheable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;

@Entity
@Cacheable
public class Fruit {

    @Id
    @GeneratedValue
    public Long id;

    @Column(length = 40, unique = true)
    public String name;

    public Fruit() {
    }

    public Fruit(String name) {
        this.name = name;
    }
}
2.Repository
package org.acme.hibernate.orm.panache.repository;


import io.quarkus.hibernate.orm.panache.PanacheRepository;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class FruitRepository implements PanacheRepository<Fruit> {
}


Resource:
package org.acme.hibernate.orm.panache.repository;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;

import org.jboss.logging.Logger;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import io.quarkus.panache.common.Sort;

@Path("repository/fruits")
@ApplicationScoped
@Produces("application/json")
@Consumes("application/json")
public class FruitRepositoryResource {

    @Inject
    FruitRepository fruitRepository;

    private static final Logger LOGGER = Logger.getLogger(FruitRepositoryResource.class.getName());

    @GET
    public List<Fruit> get() {
        return fruitRepository.listAll(Sort.by("name"));
    }

    @GET
    @Path("{id}")
    public Fruit getSingle(Long id) {
        Fruit entity = fruitRepository.findById(id);
        if (entity == null) {
            throw new WebApplicationException("Fruit with id of " + id + " does not exist.", 404);
        }
        return entity;
    }

    @POST
    @Transactional
    public Response create(Fruit fruit) {
        if (fruit.id != null) {
            throw new WebApplicationException("Id was invalidly set on request.", 422);
        }

        fruitRepository.persist(fruit);
        return Response.ok(fruit).status(201).build();
    }

    @PUT
    @Path("{id}")
    @Transactional
    public Fruit update(Long id, Fruit fruit) {
        if (fruit.name == null) {
            throw new WebApplicationException("Fruit Name was not set on request.", 422);
        }

        Fruit entity = fruitRepository.findById(id);

        if (entity == null) {
            throw new WebApplicationException("Fruit with id of " + id + " does not exist.", 404);
        }

        entity.name = fruit.name;

        return entity;
    }

    @DELETE
    @Path("{id}")
    @Transactional
    public Response delete(Long id) {
        Fruit entity = fruitRepository.findById(id);
        if (entity == null) {
            throw new WebApplicationException("Fruit with id of " + id + " does not exist.", 404);
        }
        fruitRepository.delete(entity);
        return Response.status(204).build();
    }

    @Provider
    public static class ErrorMapper implements ExceptionMapper<Exception> {

        @Inject
        ObjectMapper objectMapper;

        @Override
        public Response toResponse(Exception exception) {
            LOGGER.error("Failed to handle request", exception);

            int code = 500;
            if (exception instanceof WebApplicationException) {
                code = ((WebApplicationException) exception).getResponse().getStatus();
            }

            ObjectNode exceptionJson = objectMapper.createObjectNode();
            exceptionJson.put("exceptionType", exception.getClass().getName());
            exceptionJson.put("code", code);

            if (exception.getMessage() != null) {
                exceptionJson.put("error", exception.getMessage());
            }

            return Response.status(code)
                    .entity(exceptionJson)
                    .build();
        }

    }
}

